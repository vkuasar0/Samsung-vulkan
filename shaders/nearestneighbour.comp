#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 2, rgba8) uniform image2D resultImage;

float avg(vec3 vecIn)
{
    float vecOut = vecIn[0] + vecIn[1] + vecIn[2] / 3.0;
    return vecOut;
}

void main()
{   
	 const int filterSize = 10;

    vec3 nearest = {0.0, 0.0, 0.0};
    float nearestAvg = 1.0;   

	 vec4 res;

    int n = -1;
    for (int i=0; i<filterSize; ++i) 
    {   
        for(int j=0; j<filterSize; ++j) 
        {    
            n++;              
            vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
				 float aRgb = avg(rgb);
            float aNearest = avg(nearest);
				 float difference = aRgb - aNearest;
            if(difference < nearestAvg)
            {
				     nearest = rgb;
					  nearestAvg = difference;
					  res = vec4(vec3(nearest), 1.0);    
				 }
        }
    }

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
                                       
}