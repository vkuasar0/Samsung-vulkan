#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 2, rgba8) uniform image2D resultImage;

precision highp float;

void main()
{
    const int kernelSize = 50;
    float sigma = 50.0;
    float blurSize = 1.0;
    const float pi = 3.14159265f;

    const float numBlurPixelsPerSide = (kernelSize - 1) / 2 * blurSize; 

    vec3 incrementalGaussian;
    incrementalGaussian.x = 1.0f / (sqrt(2.0f * pi) * sigma);
    incrementalGaussian.y = exp(-0.5f / (sigma * sigma));
    incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;

    vec3 avgValue = vec3(0.0f, 0.0f, 0.0f);
    float coefficientSum = 0.0f;

    ivec2 imgSize = imageSize(inputImage);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

    if (pixelCoord.x >= imgSize.x || pixelCoord.y >= imgSize.y) {
        return;
    }

    avgValue += imageLoad(inputImage, pixelCoord).rgb * incrementalGaussian.x;
    coefficientSum += incrementalGaussian.x;
    incrementalGaussian.xy *= incrementalGaussian.yz;

    // Horizontal
    for (float i = 1.0f; i <= numBlurPixelsPerSide; i++) 
    { 
        ivec2 offset = ivec2(i * blurSize, 0);
        if (pixelCoord.x - int(i * blurSize) >= 0) {
            avgValue += imageLoad(inputImage, pixelCoord - offset).rgb * incrementalGaussian.x;
        }
        if (pixelCoord.x + int(i * blurSize) < imgSize.x) {
            avgValue += imageLoad(inputImage, pixelCoord + offset).rgb * incrementalGaussian.x;
        }
        coefficientSum += 2 * incrementalGaussian.x;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }

    // Vertical
    for (float i = 1.0f; i <= numBlurPixelsPerSide; i++) 
    { 
        ivec2 offset = ivec2(0, i * blurSize);
        if (pixelCoord.y - int(i * blurSize) >= 0) {
            avgValue += imageLoad(inputImage, pixelCoord - offset).rgb * incrementalGaussian.y;
        }
        if (pixelCoord.y + int(i * blurSize) < imgSize.y) {
            avgValue += imageLoad(inputImage, pixelCoord + offset).rgb * incrementalGaussian.y;
        }
        coefficientSum += 2 * incrementalGaussian.y;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }

    vec4 res = vec4(avgValue / coefficientSum, 1.0);

    imageStore(resultImage, pixelCoord, res);
}
